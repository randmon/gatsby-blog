{"version":3,"file":"component---src-pages-blog-mdx-slug-js-fffc6de8018989ed974f.js","mappings":"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","sources":["webpack://my-gatsby-site/../src/image-utils.ts","webpack://my-gatsby-site/../src/components/hooks.ts","webpack://my-gatsby-site/../src/components/picture.tsx","webpack://my-gatsby-site/../src/components/layout-wrapper.tsx","webpack://my-gatsby-site/../src/components/placeholder.tsx","webpack://my-gatsby-site/../src/components/main-image.tsx","webpack://my-gatsby-site/../src/components/gatsby-image.browser.tsx","webpack://my-gatsby-site/../src/components/gatsby-image.server.tsx","webpack://my-gatsby-site/../src/components/static-image.server.tsx","webpack://my-gatsby-site/../src/components/static-image.tsx","webpack://my-gatsby-site/./node_modules/gatsby-plugin-image/node_modules/camelcase/index.js","webpack://my-gatsby-site/./node_modules/gatsby-plugin-mdx/index.js","webpack://my-gatsby-site/./node_modules/gatsby-plugin-mdx/mdx-renderer.js","webpack://my-gatsby-site/./node_modules/@mantine/core/esm/Stack/Stack.styles.js","webpack://my-gatsby-site/./node_modules/@mantine/core/esm/Stack/Stack.js","webpack://my-gatsby-site/./src/pages/blog/{mdx.slug}.js","webpack://my-gatsby-site/./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack://my-gatsby-site/./node_modules/@babel/runtime/helpers/construct.js","webpack://my-gatsby-site/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://my-gatsby-site/./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js","webpack://my-gatsby-site/./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack://my-gatsby-site/./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack://my-gatsby-site/./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","webpack://my-gatsby-site/./node_modules/@babel/runtime/helpers/toConsumableArray.js"],"sourcesContent":["import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        document.addEventListener(`load`, function onLoadListener() {\n          document.removeEventListener(`load`, onLoadListener)\n\n          onStartLoad?.({\n            wasCached: true,\n          })\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","const React = require(`react`)\nconst { mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  children,\n  ...props\n}) {\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, {...props })\n}\n","import { createStyles } from '@mantine/styles';\nvar useStyles = createStyles(function (theme, _ref) {\n  var spacing = _ref.spacing,\n      align = _ref.align,\n      justify = _ref.justify;\n  return {\n    root: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: align,\n      justifyContent: justify,\n      gap: theme.fn.size({\n        size: spacing,\n        sizes: theme.spacing\n      })\n    }\n  };\n});\nexport default useStyles;","function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { forwardRef } from 'react';\nimport { useComponentDefaultProps } from '@mantine/styles';\nimport useStyles from './Stack.styles.js';\nimport { Box } from '../Box/Box.js';\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) {\n    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return a;\n};\n\nvar __objRest = function __objRest(source, exclude) {\n  var target = {};\n\n  for (var prop in source) {\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  }\n\n  if (source != null && __getOwnPropSymbols) {\n    var _iterator2 = _createForOfIteratorHelper(__getOwnPropSymbols(source)),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var prop = _step2.value;\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  return target;\n};\n\nvar defaultProps = {\n  spacing: \"md\",\n  align: \"stretch\",\n  justify: \"top\"\n};\nvar Stack = forwardRef(function (props, ref) {\n  var _a = useComponentDefaultProps(\"Stack\", defaultProps, props),\n      spacing = _a.spacing,\n      className = _a.className,\n      align = _a.align,\n      justify = _a.justify,\n      unstyled = _a.unstyled,\n      others = __objRest(_a, [\"spacing\", \"className\", \"align\", \"justify\", \"unstyled\"]);\n\n  var _useStyles = useStyles({\n    spacing: spacing,\n    align: align,\n    justify: justify\n  }, {\n    name: \"Stack\",\n    unstyled: unstyled\n  }),\n      classes = _useStyles.classes,\n      cx = _useStyles.cx;\n\n  return /* @__PURE__ */React.createElement(Box, __spreadValues({\n    className: cx(classes.root, className),\n    ref: ref\n  }, others));\n});\nStack.displayName = \"@mantine/core/Stack\";\nexport { Stack };","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport { MDXRenderer } from 'gatsby-plugin-mdx';\r\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image';\r\nimport Layout from '../../components/layout';\r\nimport SEO from '../../components/head/seo';\r\nimport { Container, Stack, Text, Title } from '@mantine/core';\r\n\r\nconst BlogPost = ({ data }) => {\r\n    const image = getImage(data.mdx.frontmatter.hero_image)\r\n\r\n    return (\r\n        <Layout pageTitle={data.mdx.frontmatter.title}>\r\n                <Stack align='center' mb={20}>\r\n                    <Title order={2}>{data.mdx.frontmatter.title}</Title>\r\n                    <Text color='dimmed'><small>Posted: {data.mdx.frontmatter.date}</small></Text>\r\n                </Stack>\r\n                <GatsbyImage\r\n                    image={image}\r\n                    alt={data.mdx.frontmatter.hero_image_alt}\r\n                />\r\n                <p>\r\n                    Photo Credit:{\" \"}\r\n                    <a href={data.mdx.frontmatter.hero_image_credit_link}>\r\n                        {data.mdx.frontmatter.hero_image_credit_text}\r\n                    </a>\r\n                </p>\r\n                <MDXRenderer>\r\n                    {data.mdx.body}\r\n                </MDXRenderer>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport const query = graphql`\r\n    query($id: String) {\r\n        mdx(id: {eq: $id}) {\r\n            body\r\n            frontmatter {\r\n                title\r\n                date(formatString: \"MMMM DD, YYYY\")\r\n                hero_image_alt\r\n                hero_image_credit_link\r\n                hero_image_credit_text\r\n                hero_image {\r\n                    childImageSharp {\r\n                        gatsbyImageData\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const Head = ({ data }) => (\r\n    <SEO title={data.mdx.frontmatter.title}/>\r\n);\r\n\r\nexport default BlogPost","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\n\nvar isNativeReflectConstruct = require(\"./isNativeReflectConstruct.js\");\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct.bind(), module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nmodule.exports = _construct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\n\nvar iterableToArray = require(\"./iterableToArray.js\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"],"names":["height","prototype","node","images","fallback","src","Boolean","gatsbyImageData","gatsbyImage","childImageSharp","format","isLoading","isLoaded","loading","style","shouldLoad","opacity","placeholder","layout","width","backgroundColor","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","transition","sources","fallbackImage","paddingTop","maxWidth","display","React","alt","role","children","props","Fragment","Sizer","srcSet","decoding","undefined","t","sizes","Image","length","map","media","type","key","propTypes","PropTypes","Picture","displayName","isRequired","Placeholder","propName","componentName","MainImage","rest","image","altValidator","Set","onError","as","className","preactClass","class","onStartLoad","onLoad","overflow","getWrapperProps","wStyle","wClass","wrapperProps","useRef","useMemo","JSON","stringify","sizer","getSizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","current","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","document","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","memo","warn","GatsbyImageHydrator","GatsbyImage","checkDimensionProps","validLayouts","Error","GatsbyImageBrowser","__error","imageData","__imageData","console","StaticImage","camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","trim","filter","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","MDXRenderer","require","mdx","useMDXScope","scope","mdxScope","End","fullScope","keys","values","fn","theme","_ref","spacing","flexDirection","alignItems","align","justifyContent","justify","gap","size","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","minLen","_arrayLikeToArray","n","toString","call","constructor","name","from","_unsupportedIterableToArray","F","s","done","value","e","_e","f","err","normalCompletion","didErr","step","next","_e2","return","arr","len","arr2","__defProp","defineProperty","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","enumerable","configurable","writable","defaultProps","Stack","forwardRef","_a","unstyled","others","source","exclude","target","prop","indexOf","_step2","_iterator2","__objRest","_useStyles","classes","cx","Box","a","b","_step","_iterator","__spreadValues","Head","data","title","frontmatter","getImage","hero_image","pageTitle","mb","Title","order","Text","color","date","G","hero_image_alt","href","hero_image_credit_link","hero_image_credit_text","body","arrayLikeToArray","__esModule","setPrototypeOf","isNativeReflectConstruct","_construct","Parent","args","Class","Reflect","construct","bind","push","apply","instance","Function","arguments","sham","Proxy","valueOf","iter","excluded","sourceKeys","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread"],"sourceRoot":""}